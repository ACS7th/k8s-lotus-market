version: 0.2

env:
  variables:
    AWS_REGION: ap-northeast-2
    NEXT_APP_IMAGE_NAME: next-app
    SPRING_APP_IMAGE_NAME: spring-app
    MONGO_DB_IMAGE_NAME: mongo-db
    REPOSITORY_URL1: 061051215363.dkr.ecr.ap-northeast-2.amazonaws.com/lotus-market/next
    REPOSITORY_URL2: 061051215363.dkr.ecr.ap-northeast-2.amazonaws.com/lotus-market/spring
    REPOSITORY_URL3: 061051215363.dkr.ecr.ap-northeast-2.amazonaws.com/lotus-market/db

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URL1
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URL2
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URL3

  build:
    commands:
      - echo Build started on date
      
      # Build next-app
      - echo Building the Docker image for next-app...
      - NEXT_APP_COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - NEXT_APP_IMAGE_TAG=${NEXT_APP_COMMIT_HASH}
      - docker build -f apps/next-app/Dockerfile -t $NEXT_APP_IMAGE_NAME:$NEXT_APP_IMAGE_TAG ./apps/next-app || { echo "next-app build failed"; exit 1; }
      - docker tag $NEXT_APP_IMAGE_NAME:$NEXT_APP_IMAGE_TAG $REPOSITORY_URL1:$NEXT_APP_IMAGE_TAG
      - docker tag $NEXT_APP_IMAGE_NAME:$NEXT_APP_IMAGE_TAG $REPOSITORY_URL1:latest

      # Build spring-app
      - echo Building the Docker image for spring-app...
      - SPRING_APP_COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - SPRING_APP_IMAGE_TAG=${SPRING_APP_COMMIT_HASH}
      - docker build -f apps/spring-app/Dockerfile -t $SPRING_APP_IMAGE_NAME:$SPRING_APP_IMAGE_TAG ./apps/spring-app || { echo "spring-app build failed"; exit 1; }
      - docker tag $SPRING_APP_IMAGE_NAME:$SPRING_APP_IMAGE_TAG $REPOSITORY_URL2:$SPRING_APP_IMAGE_TAG
      - docker tag $SPRING_APP_IMAGE_NAME:$SPRING_APP_IMAGE_TAG $REPOSITORY_URL2:latest
      
      # Build mongo-db
      - echo Building the Docker image for mongo-db...
      - MONGO_DB_COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - MONGO_DB_IMAGE_TAG=${MONGO_DB_COMMIT_HASH}
      - docker build -f apps/mongo-db/Dockerfile -t $MONGO_DB_IMAGE_NAME:$MONGO_DB_IMAGE_TAG ./apps/mongo-db || { echo "mongo-db build failed"; exit 1; }
      - docker tag $MONGO_DB_IMAGE_NAME:$MONGO_DB_IMAGE_TAG $REPOSITORY_URL3:$MONGO_DB_IMAGE_TAG
      - docker tag $MONGO_DB_IMAGE_NAME:$MONGO_DB_IMAGE_TAG $REPOSITORY_URL3:latest

      - echo Build completed on date
      - echo Pushing the Docker images...
      
      # Push next-app image
      - echo "Pushing next-app image $NEXT_APP_IMAGE_NAME:$NEXT_APP_IMAGE_TAG"
      - docker push $REPOSITORY_URL1:$NEXT_APP_IMAGE_TAG
      - docker push $REPOSITORY_URL1:latest
  
      # Push spring-app image
      - echo "Pushing spring-app image $SPRING_APP_IMAGE_NAME:$SPRING_APP_IMAGE_TAG"
      - docker push $REPOSITORY_URL2:$SPRING_APP_IMAGE_TAG
      - docker push $REPOSITORY_URL2:latest

      # Push mongo-db image
      - echo "Pushing mongo-db image $MONGO_DB_IMAGE_NAME:$MONGO_DB_IMAGE_TAG"
      - docker push $REPOSITORY_URL3:$MONGO_DB_IMAGE_TAG
      - docker push $REPOSITORY_URL3:latest
      
  post_build:
    commands:
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
      
      # EKS Deployment
      - curl -o aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/latest/download/aws-iam-authenticator-linux-amd64
      - chmod +x aws-iam-authenticator
      - sudo mv aws-iam-authenticator /usr/local/bin/
      - aws eks update-kubeconfig --region ap-northeast-2 --name lotus-market
      
      - AWS_ECR_URI1=$REPOSITORY_URL1:latest
      - AWS_ECR_URI2=$REPOSITORY_URL2:latest
      - AWS_ECR_URI3=$REPOSITORY_URL3:latest
      - DATE='date'
      - echo Build completed on $DATE
      - sed -i.bak 's#AWS_ECR_URI#'"$AWS_ECR_URI"'#' k8s/front-ops/front-ops-deploy.yaml
      - sed -i.bak 's#AWS_ECR_URI#'"$AWS_ECR_URI"'#' k8s/back-ops/back-ops-deploy.yaml
      - sed -i.bak 's#AWS_ECR_URI#'"$AWS_ECR_URI"'#' k8s/db-ops/db-ops-deploy.yaml
      - kubectl apply -f k8s/db-ops/
      - kubectl apply -f k8s/back-ops/
      - kubectl apply -f k8s/front-ops/

artifacts:
  files:
    - '**/*'
