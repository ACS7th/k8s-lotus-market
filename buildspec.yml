version: 0.2

env:
  variables:
    AWS_REGION: ap-northeast-2
    NEXT_APP_IMAGE_NAME: next-app
    SPRING_APP_IMAGE_NAME: spring-app
    MONGO_DB_IMAGE_NAME: mongo-db
    REPOSITORY_URL1: public.ecr.aws/t7q9p8g1/lotus-maket/next
    REPOSITORY_URL2: public.ecr.aws/t7q9p8g1/lotus-maket/spring
    REPOSITORY_URL3: public.ecr.aws/t7q9p8g1/lotus-market/db

phases:
  pre_build:
    commands:
      - echo ENV Values
      - echo ---------------------------------
      - echo $AWS_DEFAULT_REGION
      - echo $AWS_ACCOUNT_ID
      - echo $IMAGE_REPO_NAME
      - echo $IMAGE_TAG
      - echo $CODEBUILD_BUILD_NUMBER
      - echo ---------------------------------

      - echo Logging in to Amazon Public ECR...
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URL1
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URL2
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URL3

  build:
    commands:
      - echo Build started on date
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"

      # Build next-app
      - echo Building the Docker image for next-app...
      - NEXT_APP_COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - NEXT_APP_IMAGE_TAG=${NEXT_APP_COMMIT_HASH}
      - docker build -f apps/next-app/Dockerfile -t $NEXT_APP_IMAGE_NAME:$NEXT_APP_IMAGE_TAG ./apps/next-app
      - docker tag $NEXT_APP_IMAGE_NAME:$NEXT_APP_IMAGE_TAG $REPOSITORY_URL1:$NEXT_APP_IMAGE_TAG
      - docker tag $NEXT_APP_IMAGE_NAME:$NEXT_APP_IMAGE_TAG $REPOSITORY_URL1:latest

      # Build spring-app
      - echo Building the Docker image for spring-app...
      - SPRING_APP_COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - SPRING_APP_IMAGE_TAG=${SPRING_APP_COMMIT_HASH}
      - docker build -f apps/spring-app/Dockerfile -t $SPRING_APP_IMAGE_NAME:$SPRING_APP_IMAGE_TAG ./apps/spring-app
      - docker tag $SPRING_APP_IMAGE_NAME:$SPRING_APP_IMAGE_TAG $REPOSITORY_URL2:$SPRING_APP_IMAGE_TAG
      - docker tag $SPRING_APP_IMAGE_NAME:$SPRING_APP_IMAGE_TAG $REPOSITORY_URL2:latest

      # Build mongo-db
      - echo Building the Docker image for mongo-db...
      - MONGO_DB_COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - MONGO_DB_IMAGE_TAG=${MONGO_DB_COMMIT_HASH}
      - docker build -f apps/mongo-db/Dockerfile -t $MONGO_DB_IMAGE_NAME:$MONGO_DB_IMAGE_TAG ./apps/mongo-db
      - docker tag $MONGO_DB_IMAGE_NAME:$MONGO_DB_IMAGE_TAG $REPOSITORY_URL3:$MONGO_DB_IMAGE_TAG
      - docker tag $MONGO_DB_IMAGE_NAME:$MONGO_DB_IMAGE_TAG $REPOSITORY_URL3:latest

      - echo Build completed on date
      - echo Pushing the Docker images...

      # Push next-app image
      - echo "Pushing next-app image $NEXT_APP_IMAGE_NAME:$NEXT_APP_IMAGE_TAG"
      - docker push $REPOSITORY_URL1:$NEXT_APP_IMAGE_TAG
      - docker push $REPOSITORY_URL1:latest

      # Push spring-app image
      - echo "Pushing spring-app image $SPRING_APP_IMAGE_NAME:$SPRING_APP_IMAGE_TAG"
      - docker push $REPOSITORY_URL2:$SPRING_APP_IMAGE_TAG
      - docker push $REPOSITORY_URL2:latest

      # Push mongo-db image
      - echo "Pushing mongo-db image $MONGO_DB_IMAGE_NAME:$MONGO_DB_IMAGE_TAG"
      - docker push $REPOSITORY_URL3:$MONGO_DB_IMAGE_TAG
      - docker push $REPOSITORY_URL3:latest

image_deploy:
  commands:
    - echo "=== Save Bastion SSH key ==="
    - echo "$BASTION_PRIVATE_KEY" > bastion.pem
    - chmod 400 bastion.pem
    - ls -l bastion.pem

    - BASTION_HOST="54.180.140.42"
    - KEY_FILE="bastion.pem"

    - echo "=== Update YAML files with image URIs ==="
    - sed -i.bak 's#AWS_ECR_URI1#'"$AWS_ECR_URI1"'#' k8s/front-ops/front-ops-deploy.yaml
    - sed -i.bak 's#AWS_ECR_URI2#'"$AWS_ECR_URI2"'#' k8s/back-ops/back-ops-deploy.yaml
    - sed -i.bak 's#AWS_ECR_URI3#'"$AWS_ECR_URI3"'#' k8s/db-ops/db-ops-deploy.yaml

    - echo "=== Debug SSH connection ==="
    - ssh -o StrictHostKeyChecking=no -i $KEY_FILE ec2-user@$BASTION_HOST "echo Connected to Bastion Host"

    - echo "=== Transfer updated YAML files to Bastion Host ==="
    - scp -o StrictHostKeyChecking=no -i $KEY_FILE k8s/front-ops/front-ops-deploy.yaml ec2-user@$BASTION_HOST:/home/ec2-user/k8s-lotus-market/k8s/front-ops/front-ops-deploy.yaml
    - scp -o StrictHostKeyChecking=no -i $KEY_FILE k8s/back-ops/back-ops-deploy.yaml ec2-user@$BASTION_HOST:/home/ec2-user/k8s-lotus-market/k8s/back-ops/back-ops-deploy.yaml
    - scp -o StrictHostKeyChecking=no -i $KEY_FILE k8s/db-ops/db-ops-deploy.yaml ec2-user@$BASTION_HOST:/home/ec2-user/k8s-lotus-market/k8s/db-ops/db-ops-deploy.yaml

    - echo "=== Connect to Bastion Host and apply configurations ==="
    - ssh -o StrictHostKeyChecking=no ec2-user@$Bastion_HOST -i $KEY_FILE "kubectl apply -f /home/ec2-user/k8s-lotus-market/k8s/db-ops/db-ops-deploy.yaml"
    - ssh -o StrictHostKeyChecking=no ec2-user@$Bastion_HOST -i $KEY_FILE "kubectl apply -f /home/ec2-user/k8s-lotus-market/k8s/back-ops/back-ops-deploy.yaml"
    - ssh -o StrictHostKeyChecking=no ec2-user@$Bastion_HOST -i $KEY_FILE "kubectl apply -f /home/ec2-user/k8s-lotus-market/k8s/front-ops/front-ops-deploy.yaml"

artifacts:
  files:
    - '**/*'
